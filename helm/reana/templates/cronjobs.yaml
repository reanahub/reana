{{/* system-status */}}
{{- if .Values.notifications.enabled }}
{{- if .Values.notifications.system_status }}
{{- $cronValues := dict -}}
{{- $_ := set $cronValues "scope" . -}}
{{- $_ := set $cronValues "name" "system-status" -}}
{{- $_ := set $cronValues "schedule" .Values.notifications.system_status -}}
{{- $_ := set $cronValues "container_args" (list (print "flask reana-admin status-report --email " .Values.notifications.email_config.receiver)) -}}
{{- $cronEnvs:= dict -}}
{{- $cronEnvsFromSecret:= dict -}}
{{- if .Values.reana_hostname }}
  {{- $_ := set $cronEnvs "REANA_HOSTNAME" .Values.reana_hostname -}}
{{- end }}
{{- if .Values.debug.enabled }}
{{- $_ := set $cronEnvs "REANA_EMAIL_SMTP_SERVER" (printf "%s-mail" (include "reana.prefix" .)) -}}
{{- $_ := set $cronEnvs "REANA_EMAIL_SMTP_PORT" "30025" -}}
{{- else }}
{{- $_ := set $cronEnvs "REANA_EMAIL_SMTP_SERVER" .Values.notifications.email_config.smtp_server -}}
{{- $_ := set $cronEnvs "REANA_EMAIL_SMTP_PORT" .Values.notifications.email_config.smtp_port -}}
{{- $_ := set $cronEnvsFromSecret "REANA_EMAIL_LOGIN" (list (printf "%s-mail-notification-sender-password" (include "reana.prefix" . )) "REANA_EMAIL_LOGIN" ) -}}
{{- $_ := set $cronEnvsFromSecret "REANA_EMAIL_PASSWORD" (list (printf "%s-mail-notification-sender-password" (include "reana.prefix" . )) "REANA_EMAIL_PASSWORD" ) -}}
{{- end }}
{{- $_ := set $cronEnvsFromSecret "REANA_ADMIN_ACCESS_TOKEN" (list (printf "%s-admin-access-token" (include "reana.prefix" . )) "ADMIN_ACCESS_TOKEN" ) -}}
{{- $_ := set $cronEnvs "REANA_COMPONENT_PREFIX" (include "reana.prefix" .) -}}
{{- $_ := set $cronEnvs "REANA_EMAIL_SENDER" .Values.notifications.email_config.sender -}}
{{- $_ := set $cronEnvs "REANA_EMAIL_SENDER" .Values.notifications.email_config.sender -}}
{{- $_ := set $cronEnvs "REANA_INFRASTRUCTURE_KUBERNETES_NAMESPACE" .Release.Namespace -}}
{{- $_ := set $cronEnvs "REANA_RUNTIME_KUBERNETES_NAMESPACE" (.Values.namespace_runtime | default .Release.Namespace) -}}
{{- $_ := set $cronValues "env_vars" $cronEnvs -}}
{{- $_ := set $cronValues "env_vars_from_secret" $cronEnvsFromSecret -}}
{{ template "reana.cronjob_spec" $cronValues }}
{{- end }}
{{- end }}
---
{{/* retention-rules-apply */}}
{{- $cronValues := dict -}}
{{- $_ := set $cronValues "scope" . -}}
{{- $_ := set $cronValues "name" "retention-rules-apply" -}}
{{- $_ := set $cronValues "schedule" .Values.workspaces.retention_rules.cronjob_schedule -}}
{{- $_ := set $cronValues "container_args" (list "flask reana-admin retention-rules-apply") -}}
{{ template "reana.cronjob_spec" $cronValues }}
---
{{/* resource-quota-update */}}
{{- if and .Values.quota.enabled (tpl .Values.quota.periodic_update_policy .) }}
{{- $cronValues := dict -}}
{{- $_ := set $cronValues "scope" . -}}
{{- $_ := set $cronValues "name" "resource-quota-update" -}}
{{- $_ := set $cronValues "schedule" (tpl .Values.quota.periodic_update_policy .) -}}
{{- $_ := set $cronValues "container_args" (list "reana-db quota resource-usage-update") -}}
{{- $_ := set $cronValues "env_vars" (dict "REANA_PERIODIC_RESOURCE_QUOTA_UPDATE_POLICY" "true") -}}
{{ template "reana.cronjob_spec" $cronValues }}
{{- end }}
---
{{/* interactive-session-cleanup */}}
{{- if not (contains "forever" (.Values.interactive_sessions.maximum_inactivity_period | quote)) }}
{{- $cronValues := dict -}}
{{- $_ := set $cronValues "scope" . -}}
{{- $_ := set $cronValues "name" "interactive-session-cleanup" -}}
{{- $_ := set $cronValues "schedule" .Values.interactive_sessions.cronjob_schedule -}}
{{- $_ := set $cronValues "container_args" (list (print "flask reana-admin interactive-session-cleanup -d " .Values.interactive_sessions.maximum_inactivity_period)) -}}
{{- $cronEnvs:= dict -}}
{{- if .Values.reana_hostname }}
  {{- $_ := set $cronEnvs "REANA_HOSTNAME" .Values.reana_hostname -}}
{{- end }}
{{- $_ := set $cronValues "env_vars" $cronEnvs -}}
{{ template "reana.cronjob_spec" $cronValues }}
{{- end }}
